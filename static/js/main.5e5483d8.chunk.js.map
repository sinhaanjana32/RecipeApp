{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","Math","round","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCgB3CC,EAdD,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACtC,OACE,yBAAKC,UAAWC,IAAMC,QACrB,4BAAON,GACP,4BACCG,EAAYI,KAAI,SAAAC,GAAU,OAAK,gCAAMA,EAAWC,KAAjB,QADhC,KAEC,+BAAI,8CAAJ,IAAiCC,KAAKC,MAAMV,IAC5C,yBAAMG,UAAWC,IAAMH,MAAOU,IAAKV,EAAOW,IAAI,OC2DnCC,G,MA9DH,WAEV,IAFe,EAMaC,mBAAS,IANtB,mBAMVC,EANU,KAMDC,EANC,OAOSF,mBAAS,IAPlB,mBAOVG,EAPU,KAOHC,EAPG,OAQSJ,mBAAS,WARlB,mBAQVK,EARU,KAQHC,EARG,KAUjBC,qBAAU,WAAKC,MAAe,CAACH,IAE/B,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,mCAAD,OAAoCL,EAApC,mBAXX,WAWW,oBAVX,qCASE,cACbM,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBX,EAAWW,EAAKC,MAHG,2CAAH,qDAkBhB,OAEA,yBAAKzB,UAAU,OACf,wBAAIA,UAAU,QAAd,qBACA,0BAAMA,UAAU,cAAc0B,SAXZ,SAACC,GACnBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,MAWV,2BAAOc,KAAK,OAAO7B,UAAU,aAAa8B,MAAOhB,EAAQiB,SAlBpC,SAACJ,GACtBZ,EAAUY,EAAEK,OAAOF,QAiB8DG,YAAY,uBAC7F,4BACGJ,KAAK,SACL7B,UAAU,iCAFb,YAKA,yBAAKA,UAAU,WAEZY,EAAQT,KAAI,SAAAD,GAAM,OACnB,kBAAC,EAAD,CACAgC,IAAMhC,EAAOA,OAAOiC,MACpBvC,MAAOM,EAAOA,OAAOiC,MACrBtC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAeG,EAAOA,OAAOH,qBC9CXqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e5483d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__9bL4u\",\"image\":\"recipe_image__QQ69I\"};","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe =({title,calories,image, ingredients})=>{\nreturn(\n  <div className={style.recipe}>\n   <h1  >{title}</h1>\n   <ol>\n   {ingredients.map(ingredient => (<li> {ingredient.text} </li>))} </ol> \n    <p> <strong> Calories:</strong> {Math.round(calories)}</p>\n    <img  className={style.image} src={image} alt=\"\" />\n\n\n  </div>\n);\n}\n\nexport default Recipe;\n","import React, {useEffect, useState} from 'react';\nimport Recipe from   './Recipe';\nimport './App.css';\n\n\n\n\nconst App = ()=> {\n\n  const APP_ID = '9e09c22a';\n  const APP_Key= '504a849390f558a3ea3a812960fbabf6';\n\n\nconst [recipes, setRecipes] = useState([]);\nconst [search,setSearch] =useState('');\nconst [query, setQuery] = useState('chicken');\n\nuseEffect(()=>{getRecipes()}, [query])\n\nconst getRecipes = async () =>{\nconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_Key}`);\nconst data = await response.json();\nsetRecipes(data.hits);\n}\n\n\nconst updateSearch = (e) => {\nsetSearch(e.target.value);\n}\n\nconst getSearch = (e) =>{\ne.preventDefault();\nsetQuery(search)\nsetSearch('')\n}\n\n\nreturn (\n\n<div className=\"App\">\n<h1 className=\"topH\">Recipe With React</h1>\n<form className=\"search-form\" onSubmit={getSearch}>\n\n\n<input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} placeholder=\"Type your search..\"></input>\n<button\n   type=\"submit\"\n   className=\"search-button btn btn-primary\" >\nsearch </button>\n</form>\n<div className=\"recipes\">\n\n  {recipes.map(recipe => (\n  <Recipe\n  key ={recipe.recipe.label}\n  title={recipe.recipe.label}\n  calories={recipe.recipe.calories}\n  image={recipe.recipe.image}\n  ingredients = {recipe.recipe.ingredients}\n  />\n\n  ))}\n\n</div>\n</div>\n\n);\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}